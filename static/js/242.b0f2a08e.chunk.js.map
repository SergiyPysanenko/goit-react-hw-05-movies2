{"version":3,"file":"static/js/242.b0f2a08e.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/Pages/Cast/Cast.styled.jsx","components/Pages/Cast/Cast.jsx","components/Pages/Reviews/Reviews.styled.jsx","components/Pages/Reviews/Reviews.jsx","components/Pages/MovieDetails/MovieDateils.styled.jsx","components/Pages/MovieDetails/MovieDetails.jsx","components/Servises/Api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Loader_container__X02md\",\"element\":\"Loader_element__KZPg2\"};","import { BeatLoader } from \"react-spinners\";\nimport css from \"./Loader.module.css\";\n\nexport const Loader = () => {\n  return (\n    <div className={css.container}>\n      <BeatLoader className={css.element}  color=\"#3f51b5\"/>\n    </div>\n  );\n}\n\nexport default Loader;","import styled from 'styled-components';\n\nexport const Title = styled.h2`\nmargin-left: 50px;\nmargin-bottom: 10px;\ncolor: white;\n`;\n\nexport const CastList = styled.ul`\nmargin-left: 50px;\nmargin-bottom: 10px;\n list-style: none;\n display: flex;\n gap: 15px;\n`;\n\nexport const CastItem = styled.li`\nmargin-bottom: 10px;\nwidth: 10%;\ncolor: white;\n`;\nexport const Block = styled.div`\nborder: 2px solid white;\nmargin: 10px 20px;\nborder-radius: 10px;\n\n`;\nexport const Image = styled.img`\nheight: 150px;\nmargin-bottom: 10px;\nmargin-top: 10px;\n\n`;\nexport const Text = styled.p`\ntext-wrap: wrap;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Title, CastList, CastItem, Block, Image, Text } from './Cast.styled';\nimport { TheMovieDbAPI } from 'components/Servises/Api';\nimport PropTypes from 'prop-types';\nimport { Loader } from 'components/Loader/Loader';\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nexport function Cast() {\n  const { moviesId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const { data } = await theMovieDbAPI.getCastInfo(moviesId);\n\n        if (data.cast.length === 0) {\n          setError('Oooops! There is no cast info');\n        } else {\n          setCast(data.cast);\n          setError(null);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getCast();\n  }, [moviesId]);\n\n  \n\n  return (\n    <Block>\n      <Title>Cast</Title>\n      <CastList>\n        {cast.slice(0, 10).map(cast => (\n          <CastItem key={cast.id}>\n            {cast.profile_path ? (\n              <Image\n                src={`${TheMovieDbAPI.IMG_URL + cast.profile_path}`}\n                alt={cast.name}\n              />\n            ) : (\n              <Loader />\n            )}\n            <h4>{cast.name}</h4>\n            <Text>Character: {cast.character}</Text>\n          </CastItem>\n        ))}\n      </CastList>\n      {error && <p>{error}</p>}\n    </Block>\n  );\n}\nCast.propTypes = {\n  moviesId: PropTypes.number,\n};","import styled from 'styled-components';\n\nexport const Title = styled.h3`\n  margin-left: 50px;\n  margin-bottom: 10px;\n  color: white;\n`;\n\nexport const RevievsList = styled.ul`\n  margin-left: 50px;\n  margin-bottom: 10px;\n  list-style: none;\n`;\n\nexport const RevievsItem = styled.li`\n  margin-bottom: 10px;\n  color: white;\n`;\nexport const Block = styled.div`\n  border: 2px solid white;\n  margin: 10px 20px;\n  border-radius: 10px;\n`;\nexport const Text = styled.p`\n  margin-left: 50px;\n  margin-top: 10px;\n  width: 90%;\n`;\n","import { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from 'components/Servises/Api';\nimport { useParams } from 'react-router-dom';\nimport { Title, Block, Text, RevievsList, RevievsItem } from './Reviews.styled';\nimport PropTypes from 'prop-types';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nexport function Reviews() {\n  const { moviesId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const { data } = await theMovieDbAPI.getReviews(moviesId);\n\n        if (data.results.length === 0) {\n          setError('Oooops! There is no reviews');\n        } else {\n          setReviews(data.results);\n          setError(null);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getReviews();\n  }, [moviesId]);\n\n  return (\n    <Block>\n      <Title>Reviews</Title>\n\n      <RevievsList>\n        {reviews.map(review => (\n          <RevievsItem key={review.id}>\n            <h4>Author: {review.author}</h4>\n            <Text>{review.content}</Text>\n          </RevievsItem>\n        ))}\n      </RevievsList>\n\n      {error && <p>{error}</p>}\n    </Block>\n  );\n}\n\nReviews.propTypes = {\n  moviesId: PropTypes.number,\n};\n","import styled from 'styled-components';\nimport {  \n  NavLink,  \n  Link,  \n} from 'react-router-dom';\n\nexport const Block = styled.div`\ndisplay: flex;\ngap: 20px;\nmargin: 20px;\ncolor: white;\n`;\n\nexport const Image = styled.img`\nheight: 400px;\nmargin-left: 20px;\n\n`;\n\nexport const InfoBlock = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 30px;\nwidth: 500px;\n`;\n\nexport const Title = styled.h3`\nmargin-left: 50px;\ncolor: white;\n`;\nexport const LinkStyled = styled(Link)`\nmargin-left: 50px;\ndisplay: inline-block;\n  background-color: #818080;\n  color: #fff;\n  border: none;\n  padding: 0.5rem 1rem;\n  text-align: center;\n  text-decoration: none;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 0.25rem;\n  transition: background-color 0.2s ease;\n\n  &:hover {\n    background-color: #f39c1c;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);\n  }\n`;\nexport const NavLinkStyled = styled(NavLink)`\nmargin-left: 50px;\nmargin-bottom: 40px;\ncolor: blue;\ntext-decoration: none;\n  &hover:{\n    text-decoration: underline;\n  }\n`;","import { useState, useEffect } from 'react';\nimport { useParams, Routes, Route, useLocation } from 'react-router-dom';\nimport { TheMovieDbAPI } from 'components/Servises/Api';\nimport { Cast } from 'components/Pages/Cast/Cast';\nimport { Reviews } from '../Reviews/Reviews';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Block,\n  Image,\n  InfoBlock,\n  Title,\n  LinkStyled,\n  NavLinkStyled,\n} from './MovieDateils.styled';\nimport PropTypes from 'prop-types';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nfunction MovieDetails() {\n  const { moviesId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [error, setError] = useState('');\n  const [isCastVisible, setIsCastVisible] = useState(false);\n  const location = useLocation();\n  const goBackLink = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    const getMovies = async () => {\n      try {\n        const { data } = await theMovieDbAPI.getMovieInfoById(moviesId);\n        setMovie(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getMovies();\n  }, [moviesId]);\n\n  const { poster_path, title, vote_average, genres, overview } = movie;\n\n  const toggleCastVisibility = () => {\n    setIsCastVisible(!isCastVisible);\n  };\n\n  return (\n    <>\n      <LinkStyled to={goBackLink}>Go back</LinkStyled>\n      {movie && (\n        <Block>\n          {poster_path ? (\n            <Image src={`${TheMovieDbAPI.IMG_URL + poster_path}`} alt={title} />\n          ) : (\n            <Loader />\n          )}\n          <InfoBlock>\n            <h1>{title}</h1>\n            <p>User score: {Math.round(vote_average * 10)} %</p>\n            <p>\n              <b>Overview: </b>\n              {overview}\n            </p>\n            {genres && (\n              <p>\n                <b>Genres: </b>\n                {genres.map((genre) => genre.name).join(', ')}\n              </p>\n            )}\n          </InfoBlock>\n        </Block>\n      )}\n      {error && <p>Error{error}</p>}\n      <Title>Additional information</Title>\n      <ul>\n        <li>\n          <NavLinkStyled\n            to={`cast`}\n            state={{ from: location?.state?.from ?? '/' }}\n            onClick={toggleCastVisibility}\n          >\n            Cast\n          </NavLinkStyled>\n        </li>\n        <li>\n          <NavLinkStyled\n            to={`reviews`}\n            state={{ from: location?.state?.from ?? '/' }}\n            onClick={toggleCastVisibility}\n          >\n            Reviews\n          </NavLinkStyled>\n        </li>\n      </ul>\n\n      <Routes>\n        <Route path=\"cast\" element={isCastVisible && <Cast />} />\n        <Route path=\"reviews\" element={isCastVisible && <Reviews />} />\n      </Routes>\n    </>\n  );\n}\n\nMovieDetails.propTypes = {\n  moviesId: PropTypes.string.isRequired,\n};\n\nexport default MovieDetails;\n\n","import axios from 'axios';\n\nexport class TheMovieDbAPI {\n  static BASE_URL = 'https://api.themoviedb.org/3';\n  static API_KEY = 'b78615a25a38eec0481c17442651ef4d';\n  static IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  constructor() {\n    this.page = 1;\n    this.query = null;\n    this.per_page = 20;\n  }\n\n  async getPopularFilms(pageNumber) {\n    this.page = pageNumber;\n    const response = await axios.get(\n      `${TheMovieDbAPI.BASE_URL}/trending/movie/week`,\n      {\n        params: {\n          api_key: TheMovieDbAPI.API_KEY,\n          page: this.page,\n        },\n      }\n    );\n\n    return response;\n  }\n\n  async fetchUniqFilms(query) {\n    const searchParams = {\n      params: {\n        language: 'en-US',\n        page: this.page,\n        query: this.query,\n        api_key: TheMovieDbAPI.API_KEY,\n      },\n    };\n\n    const response = await axios.get(\n      `${TheMovieDbAPI.BASE_URL}/search/movie`,\n      searchParams\n    );\n\n    return response;\n  }\n\n  async getMovieInfoById(id) {\n    const response = await axios.get(`${TheMovieDbAPI.BASE_URL}/movie/${id}?`, {\n      params: {\n        api_key: TheMovieDbAPI.API_KEY,\n      },\n    });\n\n    return response;\n  }\n\n  async getCastInfo(id) {\n    const response = await axios.get(\n      `${TheMovieDbAPI.BASE_URL}/movie/${id}/credits?`,\n      {\n        params: {\n          api_key: TheMovieDbAPI.API_KEY,\n          language: 'en-US',\n        },\n      }\n    );\n\n    return response;\n  }\n\n  async getReviews(id) {\n    const response = await axios.get(\n      `${TheMovieDbAPI.BASE_URL}/movie/${id}/reviews?`,\n      {\n        params: {\n          api_key: TheMovieDbAPI.API_KEY,\n          language: 'en-US',\n          page: this.page,\n        },\n      }\n    );\n    return response;\n  }\n}"],"names":["Loader","className","css","BeatLoader","color","Title","styled","CastList","CastItem","Block","Image","Text","theMovieDbAPI","TheMovieDbAPI","Cast","moviesId","useParams","useState","cast","setCast","error","setError","useEffect","getCast","getCastInfo","data","length","message","slice","map","profile_path","src","alt","name","character","id","RevievsList","RevievsItem","Reviews","reviews","setReviews","getReviews","results","review","author","content","InfoBlock","LinkStyled","Link","NavLinkStyled","NavLink","movie","setMovie","isCastVisible","setIsCastVisible","location","useLocation","goBackLink","state","from","getMovies","getMovieInfoById","poster_path","title","vote_average","genres","overview","toggleCastVisibility","to","Math","round","genre","join","onClick","path","element","this","page","query","per_page","pageNumber","axios","BASE_URL","params","api_key","API_KEY","response","searchParams","language","IMG_URL"],"sourceRoot":""}